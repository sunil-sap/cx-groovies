import de.hybris.platform.servicelayer.search.FlexibleSearchQuery
import de.hybris.platform.core.model.user.EmployeeModel

// Configurable variables
def username = "admin"
def passwordLength = 5  // Set desired password length here

// Fetch user
def query = "SELECT {pk} FROM {Employee} WHERE {uid} = ?uid"
def fsq = new FlexibleSearchQuery(query)
fsq.addQueryParameter("uid", username)
def result = flexibleSearchService.search(fsq)

if (result.result.isEmpty()) {
    System.out.println( "‚ùå User not found.")
    return
}

def user = result.result[0] as EmployeeModel
def encodedPassword = user.getEncodedPassword()

// Allowed characters (customize based on your password policy)
def charset = ['a','d','m','i','n'] //('a'..'z') + ('A'..'Z') + ('0'..'9') + ['@', '#', '$', '%']

// Utility to generate combinations recursively
def generatePasswords(List<String> result, String current, int maxLength, List<Character> charset) {
    if (current.length() == maxLength) {
        result << current
        return
    }
    charset.each { ch ->
        generatePasswords(result, current + ch, maxLength, charset)
    }
}

// Generate password candidates (‚ö†Ô∏è This will grow exponentially with length)
def passwords = []
generatePasswords(passwords, "", passwordLength, charset)

System.out.println( "üîç Generated ${passwords.size()} passwords to check...")

def startTime = System.currentTimeMillis()

def matchedPassword = passwords.findResult { pwd ->
    return argon2PasswordEncoder.check(username, encodedPassword, pwd) ? pwd : null
}

def endTime = System.currentTimeMillis()
def duration = (endTime - startTime) / 1000.0

// Output
if (matchedPassword) {
    println( "‚úî Password matched: '${matchedPassword}'")
} else {
    println( "‚ùå No match found after checking ${passwords.size()} passwords.")
}
println( "‚è±Ô∏è Time taken: ${duration} seconds")




üîç Generated 3125 passwords to check...
‚úî Password matched: 'nimda'
‚è±Ô∏è Time taken: 56.778 seconds